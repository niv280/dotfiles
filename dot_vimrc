"        _                   _                    
"  _ __ (_)_   _____  __   _(_)_ __ ___  _ __ ___ 
" | '_ \| \ \ / / _ \ \ \ / / | '_ ` _ \| '__/ __|
" | | | | |\ V /  __/  \ V /| | | | | | | | | (__ 
" |_| |_|_| \_/ \___|   \_/ |_|_| |_| |_|_|  \___|
                                                
:set incsearch
:set backspace=2
:set mouse=a
:set hlsearch
:set hls
:set nocompatible
:set mousef
:set wildmode=list:longest,list:full
:set wmnu
:set hi=2000
:set stal=2
"set relative line number and absolute number
:set rnu
:set nu
set encoding=utf-8
set clipboard=unnamed
" disable bell sound
set noerrorbells
set vb t_vb=

"folding
set foldmethod=syntax
nnoremap <space> za
set foldnestmax=10
set nofoldenable
set foldlevel=99

"For Vundle
set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
	" let Vundle manage Vundle, required
	Plugin 'VundleVim/Vundle.vim'
	" The following are examples of different formats supported.
	" plugin on GitHub repo
	Plugin 'tpope/vim-fugitive'
	" Git plugin not hosted on GitHub
	Plugin 'git://git.wincent.com/command-t.git'
	" The sparkup vim script is in a subdirectory of this repo called vim.
	" Pass the path to set the runtimepath properly.
	Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
	" Install L9 and avoid a Naming conflict if you've already installed a
	" different version somewhere else.
	Plugin 'ascenator/L9', {'name': 'newL9'}

	"My plugin 
	Plugin 'morhetz/gruvbox'
	Plugin 'tmhedberg/SimpylFold'
	Plugin 'vim-scripts/indentpython.vim'
	Plugin 'Valloric/YouCompleteMe'
	Plugin 'vim-syntastic/syntastic'
	Plugin 'nvie/vim-flake8'
	Plugin 'jnurmine/Zenburn'
	Plugin 'altercation/vim-colors-solarized'
	Plugin 'jistr/vim-nerdtree-tabs'
	Plugin 'severin-lemaignan/vim-minimap'
	Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
	Plugin 'mechatroner/rainbow_csv'
	Plugin 'chrisbra/csv.vim'
call vundle#end()            " required
filetype plugin indent on    " required

syntax enable
set background=dark
"let g:solarized_visibility="high"
"let g:solarized_contrast = "high"

if has("gui_running") 
	colorscheme gruvbox
else
	colorscheme gruvbox	
    	hi! Normal ctermbg=NONE guibg=NONE
	highlight NonText ctermbg=none	
endif

:autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))

" nerd tree
set encoding=UTF-8
map <C-t> :NERDTreeToggle<CR>
let g:nerdtree_tabs_open_on_gui_startup=0
let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1

"airline
if v:version > 703
    let g:airline#extensions#tabline#enabled = 1
endif

if v:version < 703
	let g:loaded_airline = 0
endif

if exists("g:loaded_webdevicons")
	call webdevicons#refresh()
endif

"""" key mapping  """""
map <C-s> :w<CR>
"close bracker automatic
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
"navigate inside normal mode
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>


" auto commands detection
" ------------------------
autocmd BufNewFile,BufRead *.sdc set formatoptions=croql tw=0 expandtab autoindent comments=:#
autocmd BufNewFile,BufRead *.sdc source ~/.vim/syntax/synopsys.vim
autocmd BufNewFile,BufRead *.sdc source ~/.vim/syntax/cadance.vim

autocmd BufNewFile,BufRead *.tcl set formatoptions=croql tw=0 expandtab autoindent comments=:#
autocmd BufNewFile,BufRead *.tcl source ~/.vim/syntax/synopsys.vim
autocmd BufNewFile,BufRead *.tcl source ~/.vim/syntax/cadance.vim
autocmd BufNewFile,BufRead *.tcl source ~/.vim/syntax/beflow.vim

autocmd BufNewFile,BufRead *.tcl set formatoptions=croql tw=0 expandtab autoindent comments=:#
autocmd BufNewFile,BufRead formality_constraints source ~/.vim/syntax/synopsys.vim

autocmd BufNewFile,BufRead *.rbv set filetype=verilog
autocmd BufNewFile,BufRead *.fanout set filetype=verilog

"PEP8 for python
au BufNewFile,BufRead *.py set tabstop=4
au BufNewFile,BufRead *.py set softtabstop=4
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix

" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
"python with virtualenv support
"py << EOF
"import os
"import sys
"if 'VIRTUAL_ENV' in os.environ:
"  project_base_dir = os.environ['VIRTUAL_ENV']
"  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"  execfile(activate_this, dict(__file__=activate_this))
"EOF
let python_highlight_all=1


let g:minimap_highlight='Visual'
let g:SimpylFold_docstring_preview=1

"########################################
" Create Title 
"########################################

source /home/nive/.vim/vim_function.vim
"Perl/Python/Shell comment...
imap <silent>  ###     <C-R>=CommentBlock(input("Enter comment: "),'#','#',40)<CR>
"imap <silent>  #title  <C-R>=CreateTitle(input("Enter comment: "))<CR>

"#######################################
" Tcl config                           #
" ######################################

set autoindent           " keep the previous line's indentation
set cindent              " indent after line ending in {, and use 'cinwords'
                         " see also ':help c-indent'
set shiftwidth=4
set textwidth=0
set comments=:#
set formatoptions+=r      " Automatically insert the current comment leader
set formatoptions+=q      " Allow formatting of comments with 'gq'
set cpoptions-=<          " allow '<keycode>' forms in mappings, e.g. <CR>
inoremap # X<BS>#
set cinkeys-=0#           " # in column 1 does not prevent >> from indenting
set indentkeys-=0#
syntax region tclFunc start="^proc.*{$" end="^}" transparent fold
syntax region tclBlock  start="{" end="}" transparent fold
syn keyword tclStatement        proc global return lindex
syn keyword tclStatement        global return lindex
syn match   tclStatement        "proc" contained
syntax region tclFunc start="^\z(\s*\)proc.*{$" end="^\z1}$" transparent fold contains=ALL
